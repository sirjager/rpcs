/**
 * @fileoverview gRPC-Web generated client stub for trueauth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.12
// source: service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('./google/api/annotations_pb.js')

var protoc$gen$openapiv2_options_annotations_pb = require('./protoc-gen-openapiv2/options/annotations_pb.js')

var rpc$welcome_pb = require('./rpc-welcome_pb.js')

var rpc$health_pb = require('./rpc-health_pb.js')

var rpc$register_pb = require('./rpc-register_pb.js')

var rpc$login_pb = require('./rpc-login_pb.js')

var rpc$verify_pb = require('./rpc-verify_pb.js')

var rpc$logout_pb = require('./rpc-logout_pb.js')

var rpc$refresh_pb = require('./rpc-refresh_pb.js')

var rpc$delete_pb = require('./rpc-delete_pb.js')

var rpc$forgot_pb = require('./rpc-forgot_pb.js')

var rpc$ip_pb = require('./rpc-ip_pb.js')
const proto = {};
proto.trueauth = require('./service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trueauth.TrueAuthClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.trueauth.TrueAuthPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.WelcomeRequest,
 *   !proto.trueauth.WelcomeResponse>}
 */
const methodDescriptor_TrueAuth_Welcome = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/Welcome',
  grpc.web.MethodType.UNARY,
  rpc$welcome_pb.WelcomeRequest,
  rpc$welcome_pb.WelcomeResponse,
  /**
   * @param {!proto.trueauth.WelcomeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$welcome_pb.WelcomeResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.WelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.WelcomeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.WelcomeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.welcome =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/Welcome',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Welcome,
      callback);
};


/**
 * @param {!proto.trueauth.WelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.WelcomeResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.welcome =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/Welcome',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Welcome);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.HealthRequest,
 *   !proto.trueauth.HealthResponse>}
 */
const methodDescriptor_TrueAuth_Health = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/Health',
  grpc.web.MethodType.UNARY,
  rpc$health_pb.HealthRequest,
  rpc$health_pb.HealthResponse,
  /**
   * @param {!proto.trueauth.HealthRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$health_pb.HealthResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.HealthRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.HealthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.HealthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.health =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/Health',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Health,
      callback);
};


/**
 * @param {!proto.trueauth.HealthRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.HealthResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.health =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/Health',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Health);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.RegisterRequest,
 *   !proto.trueauth.RegisterResponse>}
 */
const methodDescriptor_TrueAuth_Register = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/Register',
  grpc.web.MethodType.UNARY,
  rpc$register_pb.RegisterRequest,
  rpc$register_pb.RegisterResponse,
  /**
   * @param {!proto.trueauth.RegisterRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$register_pb.RegisterResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.RegisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.RegisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.register =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/Register',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Register,
      callback);
};


/**
 * @param {!proto.trueauth.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.RegisterResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.register =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/Register',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Register);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.LoginRequest,
 *   !proto.trueauth.LoginResponse>}
 */
const methodDescriptor_TrueAuth_Login = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/Login',
  grpc.web.MethodType.UNARY,
  rpc$login_pb.LoginRequest,
  rpc$login_pb.LoginResponse,
  /**
   * @param {!proto.trueauth.LoginRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$login_pb.LoginResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.LoginResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.LoginResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.login =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/Login',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Login,
      callback);
};


/**
 * @param {!proto.trueauth.LoginRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.LoginResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.login =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/Login',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Login);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.VerifyEmailRequest,
 *   !proto.trueauth.VerifyEmailResponse>}
 */
const methodDescriptor_TrueAuth_VerifyEmail = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/VerifyEmail',
  grpc.web.MethodType.UNARY,
  rpc$verify_pb.VerifyEmailRequest,
  rpc$verify_pb.VerifyEmailResponse,
  /**
   * @param {!proto.trueauth.VerifyEmailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$verify_pb.VerifyEmailResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.VerifyEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.VerifyEmailResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.VerifyEmailResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.verifyEmail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/VerifyEmail',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_VerifyEmail,
      callback);
};


/**
 * @param {!proto.trueauth.VerifyEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.VerifyEmailResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.verifyEmail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/VerifyEmail',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_VerifyEmail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.LogoutRequest,
 *   !proto.trueauth.LogoutResponse>}
 */
const methodDescriptor_TrueAuth_Logout = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/Logout',
  grpc.web.MethodType.UNARY,
  rpc$logout_pb.LogoutRequest,
  rpc$logout_pb.LogoutResponse,
  /**
   * @param {!proto.trueauth.LogoutRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$logout_pb.LogoutResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.LogoutRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.LogoutResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.LogoutResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.logout =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/Logout',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Logout,
      callback);
};


/**
 * @param {!proto.trueauth.LogoutRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.LogoutResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.logout =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/Logout',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_Logout);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.RefreshTokenRequest,
 *   !proto.trueauth.RefreshTokenResponse>}
 */
const methodDescriptor_TrueAuth_RefreshToken = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/RefreshToken',
  grpc.web.MethodType.UNARY,
  rpc$refresh_pb.RefreshTokenRequest,
  rpc$refresh_pb.RefreshTokenResponse,
  /**
   * @param {!proto.trueauth.RefreshTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$refresh_pb.RefreshTokenResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.RefreshTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.RefreshTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.RefreshTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.refreshToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/RefreshToken',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_RefreshToken,
      callback);
};


/**
 * @param {!proto.trueauth.RefreshTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.RefreshTokenResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.refreshToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/RefreshToken',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_RefreshToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.ForgotPasswordRequest,
 *   !proto.trueauth.ForgotPasswordResponse>}
 */
const methodDescriptor_TrueAuth_ForgotPassword = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/ForgotPassword',
  grpc.web.MethodType.UNARY,
  rpc$forgot_pb.ForgotPasswordRequest,
  rpc$forgot_pb.ForgotPasswordResponse,
  /**
   * @param {!proto.trueauth.ForgotPasswordRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$forgot_pb.ForgotPasswordResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.ForgotPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.ForgotPasswordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.ForgotPasswordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.forgotPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/ForgotPassword',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_ForgotPassword,
      callback);
};


/**
 * @param {!proto.trueauth.ForgotPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.ForgotPasswordResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.forgotPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/ForgotPassword',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_ForgotPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.ResetPasswordRequest,
 *   !proto.trueauth.ResetPasswordResponse>}
 */
const methodDescriptor_TrueAuth_ResetPassword = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/ResetPassword',
  grpc.web.MethodType.UNARY,
  rpc$forgot_pb.ResetPasswordRequest,
  rpc$forgot_pb.ResetPasswordResponse,
  /**
   * @param {!proto.trueauth.ResetPasswordRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$forgot_pb.ResetPasswordResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.ResetPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.ResetPasswordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.ResetPasswordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.resetPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/ResetPassword',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_ResetPassword,
      callback);
};


/**
 * @param {!proto.trueauth.ResetPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.ResetPasswordResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.resetPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/ResetPassword',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_ResetPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.DeleteAccountRequest,
 *   !proto.trueauth.DeleteAccountResponse>}
 */
const methodDescriptor_TrueAuth_DeleteAccount = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/DeleteAccount',
  grpc.web.MethodType.UNARY,
  rpc$delete_pb.DeleteAccountRequest,
  rpc$delete_pb.DeleteAccountResponse,
  /**
   * @param {!proto.trueauth.DeleteAccountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$delete_pb.DeleteAccountResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.DeleteAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.DeleteAccountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.DeleteAccountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.deleteAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/DeleteAccount',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_DeleteAccount,
      callback);
};


/**
 * @param {!proto.trueauth.DeleteAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.DeleteAccountResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.deleteAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/DeleteAccount',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_DeleteAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.trueauth.AllowIPAddressRequest,
 *   !proto.trueauth.AllowIPAddressResponse>}
 */
const methodDescriptor_TrueAuth_AllowIPAddress = new grpc.web.MethodDescriptor(
  '/trueauth.TrueAuth/AllowIPAddress',
  grpc.web.MethodType.UNARY,
  rpc$ip_pb.AllowIPAddressRequest,
  rpc$ip_pb.AllowIPAddressResponse,
  /**
   * @param {!proto.trueauth.AllowIPAddressRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$ip_pb.AllowIPAddressResponse.deserializeBinary
);


/**
 * @param {!proto.trueauth.AllowIPAddressRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.trueauth.AllowIPAddressResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.trueauth.AllowIPAddressResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.trueauth.TrueAuthClient.prototype.allowIPAddress =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/trueauth.TrueAuth/AllowIPAddress',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_AllowIPAddress,
      callback);
};


/**
 * @param {!proto.trueauth.AllowIPAddressRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.trueauth.AllowIPAddressResponse>}
 *     Promise that resolves to the response
 */
proto.trueauth.TrueAuthPromiseClient.prototype.allowIPAddress =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/trueauth.TrueAuth/AllowIPAddress',
      request,
      metadata || {},
      methodDescriptor_TrueAuth_AllowIPAddress);
};


module.exports = proto.trueauth;

