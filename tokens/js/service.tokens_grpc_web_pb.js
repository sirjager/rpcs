/**
 * @fileoverview gRPC-Web generated client stub for tokens
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: service.tokens.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('./google/api/annotations_pb.js')

var protoc$gen$openapiv2_options_annotations_pb = require('./protoc-gen-openapiv2/options/annotations_pb.js')

var rpc$health_tokens_pb = require('./rpc-health.tokens_pb.js')

var rpc$welcome_tokens_pb = require('./rpc-welcome.tokens_pb.js')

var rpc$create_tokens_pb = require('./rpc-create.tokens_pb.js')

var rpc$verify_tokens_pb = require('./rpc-verify.tokens_pb.js')
const proto = {};
proto.tokens = require('./service.tokens_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tokens.TokensClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.tokens.TokensPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tokens.TokensWelcomeRequest,
 *   !proto.tokens.TokensWelcomeResponse>}
 */
const methodDescriptor_Tokens_TokensWelcome = new grpc.web.MethodDescriptor(
  '/tokens.Tokens/TokensWelcome',
  grpc.web.MethodType.UNARY,
  rpc$welcome_tokens_pb.TokensWelcomeRequest,
  rpc$welcome_tokens_pb.TokensWelcomeResponse,
  /**
   * @param {!proto.tokens.TokensWelcomeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$welcome_tokens_pb.TokensWelcomeResponse.deserializeBinary
);


/**
 * @param {!proto.tokens.TokensWelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tokens.TokensWelcomeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tokens.TokensWelcomeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tokens.TokensClient.prototype.tokensWelcome =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tokens.Tokens/TokensWelcome',
      request,
      metadata || {},
      methodDescriptor_Tokens_TokensWelcome,
      callback);
};


/**
 * @param {!proto.tokens.TokensWelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tokens.TokensWelcomeResponse>}
 *     Promise that resolves to the response
 */
proto.tokens.TokensPromiseClient.prototype.tokensWelcome =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tokens.Tokens/TokensWelcome',
      request,
      metadata || {},
      methodDescriptor_Tokens_TokensWelcome);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tokens.TokensHealthRequest,
 *   !proto.tokens.TokensHealthResponse>}
 */
const methodDescriptor_Tokens_TokensHealth = new grpc.web.MethodDescriptor(
  '/tokens.Tokens/TokensHealth',
  grpc.web.MethodType.UNARY,
  rpc$health_tokens_pb.TokensHealthRequest,
  rpc$health_tokens_pb.TokensHealthResponse,
  /**
   * @param {!proto.tokens.TokensHealthRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$health_tokens_pb.TokensHealthResponse.deserializeBinary
);


/**
 * @param {!proto.tokens.TokensHealthRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tokens.TokensHealthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tokens.TokensHealthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tokens.TokensClient.prototype.tokensHealth =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tokens.Tokens/TokensHealth',
      request,
      metadata || {},
      methodDescriptor_Tokens_TokensHealth,
      callback);
};


/**
 * @param {!proto.tokens.TokensHealthRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tokens.TokensHealthResponse>}
 *     Promise that resolves to the response
 */
proto.tokens.TokensPromiseClient.prototype.tokensHealth =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tokens.Tokens/TokensHealth',
      request,
      metadata || {},
      methodDescriptor_Tokens_TokensHealth);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tokens.TokensCreateRequest,
 *   !proto.tokens.TokensCreateResponse>}
 */
const methodDescriptor_Tokens_TokensCreate = new grpc.web.MethodDescriptor(
  '/tokens.Tokens/TokensCreate',
  grpc.web.MethodType.UNARY,
  rpc$create_tokens_pb.TokensCreateRequest,
  rpc$create_tokens_pb.TokensCreateResponse,
  /**
   * @param {!proto.tokens.TokensCreateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$create_tokens_pb.TokensCreateResponse.deserializeBinary
);


/**
 * @param {!proto.tokens.TokensCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tokens.TokensCreateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tokens.TokensCreateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tokens.TokensClient.prototype.tokensCreate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tokens.Tokens/TokensCreate',
      request,
      metadata || {},
      methodDescriptor_Tokens_TokensCreate,
      callback);
};


/**
 * @param {!proto.tokens.TokensCreateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tokens.TokensCreateResponse>}
 *     Promise that resolves to the response
 */
proto.tokens.TokensPromiseClient.prototype.tokensCreate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tokens.Tokens/TokensCreate',
      request,
      metadata || {},
      methodDescriptor_Tokens_TokensCreate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.tokens.TokensVerifyRequest,
 *   !proto.tokens.TokensVerifyResponse>}
 */
const methodDescriptor_Tokens_TokensVerify = new grpc.web.MethodDescriptor(
  '/tokens.Tokens/TokensVerify',
  grpc.web.MethodType.UNARY,
  rpc$verify_tokens_pb.TokensVerifyRequest,
  rpc$verify_tokens_pb.TokensVerifyResponse,
  /**
   * @param {!proto.tokens.TokensVerifyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$verify_tokens_pb.TokensVerifyResponse.deserializeBinary
);


/**
 * @param {!proto.tokens.TokensVerifyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.tokens.TokensVerifyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.tokens.TokensVerifyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.tokens.TokensClient.prototype.tokensVerify =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/tokens.Tokens/TokensVerify',
      request,
      metadata || {},
      methodDescriptor_Tokens_TokensVerify,
      callback);
};


/**
 * @param {!proto.tokens.TokensVerifyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.tokens.TokensVerifyResponse>}
 *     Promise that resolves to the response
 */
proto.tokens.TokensPromiseClient.prototype.tokensVerify =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/tokens.Tokens/TokensVerify',
      request,
      metadata || {},
      methodDescriptor_Tokens_TokensVerify);
};


module.exports = proto.tokens;

