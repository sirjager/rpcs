// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: service.auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// ------------------------------------------------------------ Signup
	AuthWelcome(ctx context.Context, in *AuthWelcomeRequest, opts ...grpc.CallOption) (*AuthWelcomeResponse, error)
	// ------------------------------------------------------------ Signup
	AuthHealth(ctx context.Context, in *AuthHealthRequest, opts ...grpc.CallOption) (*AuthHealthResponse, error)
	// ------------------------------------------------------------ Signup
	AuthSignup(ctx context.Context, in *AuthSignupRequest, opts ...grpc.CallOption) (*AuthSignupResponse, error)
	// ------------------------------------------------------------ Signin
	AuthSignin(ctx context.Context, in *AuthSigninRequest, opts ...grpc.CallOption) (*AuthSigninResponse, error)
	// ------------------------------------------------------------ Signout
	AuthSignout(ctx context.Context, in *AuthSignoutRequest, opts ...grpc.CallOption) (*AuthSignoutResponse, error)
	// ------------------------------------------------------------ Refresh
	AuthRefreshToken(ctx context.Context, in *AuthRefreshTokenRequest, opts ...grpc.CallOption) (*AuthRefreshTokenResponse, error)
	// ------------------------------------------------------------ Request Email Verification
	AuthRequestEmailVerification(ctx context.Context, in *AuthRequestEmailVerificationRequest, opts ...grpc.CallOption) (*AuthRequestEmailVerificationResponse, error)
	// ------------------------------------------------------------ Verify Email with verification code
	AuthVerifyEmail(ctx context.Context, in *AuthVerifyEmailRequest, opts ...grpc.CallOption) (*AuthVerifyEmailResponse, error)
	// ------------------------------------------------------------ Forogt Password ? Request reset code
	AuthForgotPassword(ctx context.Context, in *AuthForgotPasswordRequest, opts ...grpc.CallOption) (*AuthForgotPasswordResponse, error)
	// ------------------------------------------------------------ Reset Password
	// If Account is not verified then we will directly delete it
	AuthResetPassword(ctx context.Context, in *AuthResetPasswordRequest, opts ...grpc.CallOption) (*AuthResetPasswordResponse, error)
	// ------------------------------------------------------------ Deletion
	// If Account is not verified then we will directly delete it
	AuthDeleteAccount(ctx context.Context, in *AuthDeleteAccountRequest, opts ...grpc.CallOption) (*AuthDeleteAccountResponse, error)
	// ------------------------------------------------------------ Users
	AuthUsers(ctx context.Context, in *AuthUsersRequest, opts ...grpc.CallOption) (*AuthUsersResponse, error)
	// ------------------------------------------------------------ User
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) AuthWelcome(ctx context.Context, in *AuthWelcomeRequest, opts ...grpc.CallOption) (*AuthWelcomeResponse, error) {
	out := new(AuthWelcomeResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthWelcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthHealth(ctx context.Context, in *AuthHealthRequest, opts ...grpc.CallOption) (*AuthHealthResponse, error) {
	out := new(AuthHealthResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthSignup(ctx context.Context, in *AuthSignupRequest, opts ...grpc.CallOption) (*AuthSignupResponse, error) {
	out := new(AuthSignupResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthSignup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthSignin(ctx context.Context, in *AuthSigninRequest, opts ...grpc.CallOption) (*AuthSigninResponse, error) {
	out := new(AuthSigninResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthSignin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthSignout(ctx context.Context, in *AuthSignoutRequest, opts ...grpc.CallOption) (*AuthSignoutResponse, error) {
	out := new(AuthSignoutResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthSignout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthRefreshToken(ctx context.Context, in *AuthRefreshTokenRequest, opts ...grpc.CallOption) (*AuthRefreshTokenResponse, error) {
	out := new(AuthRefreshTokenResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthRefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthRequestEmailVerification(ctx context.Context, in *AuthRequestEmailVerificationRequest, opts ...grpc.CallOption) (*AuthRequestEmailVerificationResponse, error) {
	out := new(AuthRequestEmailVerificationResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthRequestEmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthVerifyEmail(ctx context.Context, in *AuthVerifyEmailRequest, opts ...grpc.CallOption) (*AuthVerifyEmailResponse, error) {
	out := new(AuthVerifyEmailResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthVerifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthForgotPassword(ctx context.Context, in *AuthForgotPasswordRequest, opts ...grpc.CallOption) (*AuthForgotPasswordResponse, error) {
	out := new(AuthForgotPasswordResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthResetPassword(ctx context.Context, in *AuthResetPasswordRequest, opts ...grpc.CallOption) (*AuthResetPasswordResponse, error) {
	out := new(AuthResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthDeleteAccount(ctx context.Context, in *AuthDeleteAccountRequest, opts ...grpc.CallOption) (*AuthDeleteAccountResponse, error) {
	out := new(AuthDeleteAccountResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthDeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthUsers(ctx context.Context, in *AuthUsersRequest, opts ...grpc.CallOption) (*AuthUsersResponse, error) {
	out := new(AuthUsersResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AuthUserResponse, error) {
	out := new(AuthUserResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/AuthUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// ------------------------------------------------------------ Signup
	AuthWelcome(context.Context, *AuthWelcomeRequest) (*AuthWelcomeResponse, error)
	// ------------------------------------------------------------ Signup
	AuthHealth(context.Context, *AuthHealthRequest) (*AuthHealthResponse, error)
	// ------------------------------------------------------------ Signup
	AuthSignup(context.Context, *AuthSignupRequest) (*AuthSignupResponse, error)
	// ------------------------------------------------------------ Signin
	AuthSignin(context.Context, *AuthSigninRequest) (*AuthSigninResponse, error)
	// ------------------------------------------------------------ Signout
	AuthSignout(context.Context, *AuthSignoutRequest) (*AuthSignoutResponse, error)
	// ------------------------------------------------------------ Refresh
	AuthRefreshToken(context.Context, *AuthRefreshTokenRequest) (*AuthRefreshTokenResponse, error)
	// ------------------------------------------------------------ Request Email Verification
	AuthRequestEmailVerification(context.Context, *AuthRequestEmailVerificationRequest) (*AuthRequestEmailVerificationResponse, error)
	// ------------------------------------------------------------ Verify Email with verification code
	AuthVerifyEmail(context.Context, *AuthVerifyEmailRequest) (*AuthVerifyEmailResponse, error)
	// ------------------------------------------------------------ Forogt Password ? Request reset code
	AuthForgotPassword(context.Context, *AuthForgotPasswordRequest) (*AuthForgotPasswordResponse, error)
	// ------------------------------------------------------------ Reset Password
	// If Account is not verified then we will directly delete it
	AuthResetPassword(context.Context, *AuthResetPasswordRequest) (*AuthResetPasswordResponse, error)
	// ------------------------------------------------------------ Deletion
	// If Account is not verified then we will directly delete it
	AuthDeleteAccount(context.Context, *AuthDeleteAccountRequest) (*AuthDeleteAccountResponse, error)
	// ------------------------------------------------------------ Users
	AuthUsers(context.Context, *AuthUsersRequest) (*AuthUsersResponse, error)
	// ------------------------------------------------------------ User
	AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) AuthWelcome(context.Context, *AuthWelcomeRequest) (*AuthWelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthWelcome not implemented")
}
func (UnimplementedAuthServer) AuthHealth(context.Context, *AuthHealthRequest) (*AuthHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthHealth not implemented")
}
func (UnimplementedAuthServer) AuthSignup(context.Context, *AuthSignupRequest) (*AuthSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignup not implemented")
}
func (UnimplementedAuthServer) AuthSignin(context.Context, *AuthSigninRequest) (*AuthSigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignin not implemented")
}
func (UnimplementedAuthServer) AuthSignout(context.Context, *AuthSignoutRequest) (*AuthSignoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignout not implemented")
}
func (UnimplementedAuthServer) AuthRefreshToken(context.Context, *AuthRefreshTokenRequest) (*AuthRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRefreshToken not implemented")
}
func (UnimplementedAuthServer) AuthRequestEmailVerification(context.Context, *AuthRequestEmailVerificationRequest) (*AuthRequestEmailVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRequestEmailVerification not implemented")
}
func (UnimplementedAuthServer) AuthVerifyEmail(context.Context, *AuthVerifyEmailRequest) (*AuthVerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthVerifyEmail not implemented")
}
func (UnimplementedAuthServer) AuthForgotPassword(context.Context, *AuthForgotPasswordRequest) (*AuthForgotPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthForgotPassword not implemented")
}
func (UnimplementedAuthServer) AuthResetPassword(context.Context, *AuthResetPasswordRequest) (*AuthResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResetPassword not implemented")
}
func (UnimplementedAuthServer) AuthDeleteAccount(context.Context, *AuthDeleteAccountRequest) (*AuthDeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthDeleteAccount not implemented")
}
func (UnimplementedAuthServer) AuthUsers(context.Context, *AuthUsersRequest) (*AuthUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUsers not implemented")
}
func (UnimplementedAuthServer) AuthUser(context.Context, *AuthUserRequest) (*AuthUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_AuthWelcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthWelcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthWelcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthWelcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthWelcome(ctx, req.(*AuthWelcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthHealth(ctx, req.(*AuthHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthSignup(ctx, req.(*AuthSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthSignin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthSigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthSignin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthSignin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthSignin(ctx, req.(*AuthSigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthSignout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthSignoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthSignout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthSignout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthSignout(ctx, req.(*AuthSignoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthRefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthRefreshToken(ctx, req.(*AuthRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthRequestEmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequestEmailVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthRequestEmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthRequestEmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthRequestEmailVerification(ctx, req.(*AuthRequestEmailVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthVerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthVerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthVerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthVerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthVerifyEmail(ctx, req.(*AuthVerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthForgotPassword(ctx, req.(*AuthForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthResetPassword(ctx, req.(*AuthResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthDeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthDeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthDeleteAccount(ctx, req.(*AuthDeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthUsers(ctx, req.(*AuthUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthWelcome",
			Handler:    _Auth_AuthWelcome_Handler,
		},
		{
			MethodName: "AuthHealth",
			Handler:    _Auth_AuthHealth_Handler,
		},
		{
			MethodName: "AuthSignup",
			Handler:    _Auth_AuthSignup_Handler,
		},
		{
			MethodName: "AuthSignin",
			Handler:    _Auth_AuthSignin_Handler,
		},
		{
			MethodName: "AuthSignout",
			Handler:    _Auth_AuthSignout_Handler,
		},
		{
			MethodName: "AuthRefreshToken",
			Handler:    _Auth_AuthRefreshToken_Handler,
		},
		{
			MethodName: "AuthRequestEmailVerification",
			Handler:    _Auth_AuthRequestEmailVerification_Handler,
		},
		{
			MethodName: "AuthVerifyEmail",
			Handler:    _Auth_AuthVerifyEmail_Handler,
		},
		{
			MethodName: "AuthForgotPassword",
			Handler:    _Auth_AuthForgotPassword_Handler,
		},
		{
			MethodName: "AuthResetPassword",
			Handler:    _Auth_AuthResetPassword_Handler,
		},
		{
			MethodName: "AuthDeleteAccount",
			Handler:    _Auth_AuthDeleteAccount_Handler,
		},
		{
			MethodName: "AuthUsers",
			Handler:    _Auth_AuthUsers_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _Auth_AuthUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.auth.proto",
}
