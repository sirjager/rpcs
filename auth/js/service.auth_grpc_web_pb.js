/**
 * @fileoverview gRPC-Web generated client stub for auth
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.12
// source: service.auth.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('./google/api/annotations_pb.js')

var protoc$gen$openapiv2_options_annotations_pb = require('./protoc-gen-openapiv2/options/annotations_pb.js')

var rpc$welcome_auth_pb = require('./rpc-welcome.auth_pb.js')

var rpc$health_auth_pb = require('./rpc-health.auth_pb.js')

var rpc$signup_auth_pb = require('./rpc-signup.auth_pb.js')

var rpc$signin_auth_pb = require('./rpc-signin.auth_pb.js')

var rpc$signout_auth_pb = require('./rpc-signout.auth_pb.js')

var rpc$refresh_auth_pb = require('./rpc-refresh.auth_pb.js')

var rpc$verify_auth_pb = require('./rpc-verify.auth_pb.js')

var rpc$forgot_auth_pb = require('./rpc-forgot.auth_pb.js')

var rpc$delete_auth_pb = require('./rpc-delete.auth_pb.js')

var rpc$users_auth_pb = require('./rpc-users.auth_pb.js')
const proto = {};
proto.auth = require('./service.auth_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.AuthClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.auth.AuthPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthWelcomeRequest,
 *   !proto.auth.AuthWelcomeResponse>}
 */
const methodDescriptor_Auth_AuthWelcome = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthWelcome',
  grpc.web.MethodType.UNARY,
  rpc$welcome_auth_pb.AuthWelcomeRequest,
  rpc$welcome_auth_pb.AuthWelcomeResponse,
  /**
   * @param {!proto.auth.AuthWelcomeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$welcome_auth_pb.AuthWelcomeResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthWelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthWelcomeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthWelcomeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authWelcome =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthWelcome',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthWelcome,
      callback);
};


/**
 * @param {!proto.auth.AuthWelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthWelcomeResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authWelcome =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthWelcome',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthWelcome);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthHealthRequest,
 *   !proto.auth.AuthHealthResponse>}
 */
const methodDescriptor_Auth_AuthHealth = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthHealth',
  grpc.web.MethodType.UNARY,
  rpc$health_auth_pb.AuthHealthRequest,
  rpc$health_auth_pb.AuthHealthResponse,
  /**
   * @param {!proto.auth.AuthHealthRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$health_auth_pb.AuthHealthResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthHealthRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthHealthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthHealthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authHealth =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthHealth',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthHealth,
      callback);
};


/**
 * @param {!proto.auth.AuthHealthRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthHealthResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authHealth =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthHealth',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthHealth);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthSignupRequest,
 *   !proto.auth.AuthSignupResponse>}
 */
const methodDescriptor_Auth_AuthSignup = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthSignup',
  grpc.web.MethodType.UNARY,
  rpc$signup_auth_pb.AuthSignupRequest,
  rpc$signup_auth_pb.AuthSignupResponse,
  /**
   * @param {!proto.auth.AuthSignupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$signup_auth_pb.AuthSignupResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthSignupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthSignupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthSignupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authSignup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthSignup',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthSignup,
      callback);
};


/**
 * @param {!proto.auth.AuthSignupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthSignupResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authSignup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthSignup',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthSignup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthSigninRequest,
 *   !proto.auth.AuthSigninResponse>}
 */
const methodDescriptor_Auth_AuthSignin = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthSignin',
  grpc.web.MethodType.UNARY,
  rpc$signin_auth_pb.AuthSigninRequest,
  rpc$signin_auth_pb.AuthSigninResponse,
  /**
   * @param {!proto.auth.AuthSigninRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$signin_auth_pb.AuthSigninResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthSigninRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthSigninResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthSigninResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authSignin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthSignin',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthSignin,
      callback);
};


/**
 * @param {!proto.auth.AuthSigninRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthSigninResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authSignin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthSignin',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthSignin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthSignoutRequest,
 *   !proto.auth.AuthSignoutResponse>}
 */
const methodDescriptor_Auth_AuthSignout = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthSignout',
  grpc.web.MethodType.UNARY,
  rpc$signout_auth_pb.AuthSignoutRequest,
  rpc$signout_auth_pb.AuthSignoutResponse,
  /**
   * @param {!proto.auth.AuthSignoutRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$signout_auth_pb.AuthSignoutResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthSignoutRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthSignoutResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthSignoutResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authSignout =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthSignout',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthSignout,
      callback);
};


/**
 * @param {!proto.auth.AuthSignoutRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthSignoutResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authSignout =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthSignout',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthSignout);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthRefreshTokenRequest,
 *   !proto.auth.AuthRefreshTokenResponse>}
 */
const methodDescriptor_Auth_AuthRefreshToken = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthRefreshToken',
  grpc.web.MethodType.UNARY,
  rpc$refresh_auth_pb.AuthRefreshTokenRequest,
  rpc$refresh_auth_pb.AuthRefreshTokenResponse,
  /**
   * @param {!proto.auth.AuthRefreshTokenRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$refresh_auth_pb.AuthRefreshTokenResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthRefreshTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthRefreshTokenResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthRefreshTokenResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authRefreshToken =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthRefreshToken',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthRefreshToken,
      callback);
};


/**
 * @param {!proto.auth.AuthRefreshTokenRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthRefreshTokenResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authRefreshToken =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthRefreshToken',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthRefreshToken);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthRequestEmailVerificationRequest,
 *   !proto.auth.AuthRequestEmailVerificationResponse>}
 */
const methodDescriptor_Auth_AuthRequestEmailVerification = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthRequestEmailVerification',
  grpc.web.MethodType.UNARY,
  rpc$verify_auth_pb.AuthRequestEmailVerificationRequest,
  rpc$verify_auth_pb.AuthRequestEmailVerificationResponse,
  /**
   * @param {!proto.auth.AuthRequestEmailVerificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$verify_auth_pb.AuthRequestEmailVerificationResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthRequestEmailVerificationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthRequestEmailVerificationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthRequestEmailVerificationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authRequestEmailVerification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthRequestEmailVerification',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthRequestEmailVerification,
      callback);
};


/**
 * @param {!proto.auth.AuthRequestEmailVerificationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthRequestEmailVerificationResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authRequestEmailVerification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthRequestEmailVerification',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthRequestEmailVerification);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthVerifyEmailRequest,
 *   !proto.auth.AuthVerifyEmailResponse>}
 */
const methodDescriptor_Auth_AuthVerifyEmail = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthVerifyEmail',
  grpc.web.MethodType.UNARY,
  rpc$verify_auth_pb.AuthVerifyEmailRequest,
  rpc$verify_auth_pb.AuthVerifyEmailResponse,
  /**
   * @param {!proto.auth.AuthVerifyEmailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$verify_auth_pb.AuthVerifyEmailResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthVerifyEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthVerifyEmailResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthVerifyEmailResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authVerifyEmail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthVerifyEmail',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthVerifyEmail,
      callback);
};


/**
 * @param {!proto.auth.AuthVerifyEmailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthVerifyEmailResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authVerifyEmail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthVerifyEmail',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthVerifyEmail);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthForgotPasswordRequest,
 *   !proto.auth.AuthForgotPasswordResponse>}
 */
const methodDescriptor_Auth_AuthForgotPassword = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthForgotPassword',
  grpc.web.MethodType.UNARY,
  rpc$forgot_auth_pb.AuthForgotPasswordRequest,
  rpc$forgot_auth_pb.AuthForgotPasswordResponse,
  /**
   * @param {!proto.auth.AuthForgotPasswordRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$forgot_auth_pb.AuthForgotPasswordResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthForgotPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthForgotPasswordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthForgotPasswordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authForgotPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthForgotPassword',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthForgotPassword,
      callback);
};


/**
 * @param {!proto.auth.AuthForgotPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthForgotPasswordResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authForgotPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthForgotPassword',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthForgotPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthResetPasswordRequest,
 *   !proto.auth.AuthResetPasswordResponse>}
 */
const methodDescriptor_Auth_AuthResetPassword = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthResetPassword',
  grpc.web.MethodType.UNARY,
  rpc$forgot_auth_pb.AuthResetPasswordRequest,
  rpc$forgot_auth_pb.AuthResetPasswordResponse,
  /**
   * @param {!proto.auth.AuthResetPasswordRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$forgot_auth_pb.AuthResetPasswordResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthResetPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthResetPasswordResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthResetPasswordResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authResetPassword =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthResetPassword',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthResetPassword,
      callback);
};


/**
 * @param {!proto.auth.AuthResetPasswordRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthResetPasswordResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authResetPassword =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthResetPassword',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthResetPassword);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthDeleteAccountRequest,
 *   !proto.auth.AuthDeleteAccountResponse>}
 */
const methodDescriptor_Auth_AuthDeleteAccount = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthDeleteAccount',
  grpc.web.MethodType.UNARY,
  rpc$delete_auth_pb.AuthDeleteAccountRequest,
  rpc$delete_auth_pb.AuthDeleteAccountResponse,
  /**
   * @param {!proto.auth.AuthDeleteAccountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$delete_auth_pb.AuthDeleteAccountResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthDeleteAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthDeleteAccountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthDeleteAccountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authDeleteAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthDeleteAccount',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthDeleteAccount,
      callback);
};


/**
 * @param {!proto.auth.AuthDeleteAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthDeleteAccountResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authDeleteAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthDeleteAccount',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthDeleteAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthUsersRequest,
 *   !proto.auth.AuthUsersResponse>}
 */
const methodDescriptor_Auth_AuthUsers = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthUsers',
  grpc.web.MethodType.UNARY,
  rpc$users_auth_pb.AuthUsersRequest,
  rpc$users_auth_pb.AuthUsersResponse,
  /**
   * @param {!proto.auth.AuthUsersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$users_auth_pb.AuthUsersResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthUsersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthUsersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthUsers',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthUsers,
      callback);
};


/**
 * @param {!proto.auth.AuthUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthUsersResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthUsers',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthUsers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.auth.AuthUserRequest,
 *   !proto.auth.AuthUserResponse>}
 */
const methodDescriptor_Auth_AuthUser = new grpc.web.MethodDescriptor(
  '/auth.Auth/AuthUser',
  grpc.web.MethodType.UNARY,
  rpc$users_auth_pb.AuthUserRequest,
  rpc$users_auth_pb.AuthUserResponse,
  /**
   * @param {!proto.auth.AuthUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$users_auth_pb.AuthUserResponse.deserializeBinary
);


/**
 * @param {!proto.auth.AuthUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.auth.AuthUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.auth.AuthUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.auth.AuthClient.prototype.authUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/auth.Auth/AuthUser',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthUser,
      callback);
};


/**
 * @param {!proto.auth.AuthUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.auth.AuthUserResponse>}
 *     Promise that resolves to the response
 */
proto.auth.AuthPromiseClient.prototype.authUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/auth.Auth/AuthUser',
      request,
      metadata || {},
      methodDescriptor_Auth_AuthUser);
};


module.exports = proto.auth;

