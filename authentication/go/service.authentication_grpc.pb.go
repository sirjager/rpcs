// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service.authentication.proto

package authentication

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Authentication_AuthenticationWelcome_FullMethodName       = "/authentication.Authentication/AuthenticationWelcome"
	Authentication_AuthenticationHealth_FullMethodName        = "/authentication.Authentication/AuthenticationHealth"
	Authentication_AuthenticationSignup_FullMethodName        = "/authentication.Authentication/AuthenticationSignup"
	Authentication_AuthenticationSignin_FullMethodName        = "/authentication.Authentication/AuthenticationSignin"
	Authentication_AuthenticationSignout_FullMethodName       = "/authentication.Authentication/AuthenticationSignout"
	Authentication_AuthenticationRefreshToken_FullMethodName  = "/authentication.Authentication/AuthenticationRefreshToken"
	Authentication_AuthenticationDeleteAccount_FullMethodName = "/authentication.Authentication/AuthenticationDeleteAccount"
	Authentication_AuthenticationUsers_FullMethodName         = "/authentication.Authentication/AuthenticationUsers"
	Authentication_AuthenticationUser_FullMethodName          = "/authentication.Authentication/AuthenticationUser"
)

// AuthenticationClient is the client API for Authentication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationClient interface {
	// ------------------------------------------------------------ Signup
	AuthenticationWelcome(ctx context.Context, in *AuthenticationWelcomeRequest, opts ...grpc.CallOption) (*AuthenticationWelcomeResponse, error)
	// ------------------------------------------------------------ Signup
	AuthenticationHealth(ctx context.Context, in *AuthenticationHealthRequest, opts ...grpc.CallOption) (*AuthenticationHealthResponse, error)
	// ------------------------------------------------------------ Signup
	AuthenticationSignup(ctx context.Context, in *AuthenticationSignupRequest, opts ...grpc.CallOption) (*AuthenticationSignupResponse, error)
	// ------------------------------------------------------------ Signin
	AuthenticationSignin(ctx context.Context, in *AuthenticationSigninRequest, opts ...grpc.CallOption) (*AuthenticationSigninResponse, error)
	// ------------------------------------------------------------ Signout
	AuthenticationSignout(ctx context.Context, in *AuthenticationSignoutRequest, opts ...grpc.CallOption) (*AuthenticationSignoutResponse, error)
	// ------------------------------------------------------------ Refresh
	AuthenticationRefreshToken(ctx context.Context, in *AuthenticationRefreshTokenRequest, opts ...grpc.CallOption) (*AuthenticationRefreshTokenResponse, error)
	// ------------------------------------------------------------ Deletion
	// If Account is not verified then we will directly delete it
	AuthenticationDeleteAccount(ctx context.Context, in *AuthenticationDeleteAccountRequest, opts ...grpc.CallOption) (*AuthenticationDeleteAccountResponse, error)
	// ------------------------------------------------------------ Users
	AuthenticationUsers(ctx context.Context, in *AuthenticationUsersRequest, opts ...grpc.CallOption) (*AuthenticationUsersResponse, error)
	// ------------------------------------------------------------ User
	AuthenticationUser(ctx context.Context, in *AuthenticationUserRequest, opts ...grpc.CallOption) (*AuthenticationUserResponse, error)
}

type authenticationClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationClient(cc grpc.ClientConnInterface) AuthenticationClient {
	return &authenticationClient{cc}
}

func (c *authenticationClient) AuthenticationWelcome(ctx context.Context, in *AuthenticationWelcomeRequest, opts ...grpc.CallOption) (*AuthenticationWelcomeResponse, error) {
	out := new(AuthenticationWelcomeResponse)
	err := c.cc.Invoke(ctx, Authentication_AuthenticationWelcome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) AuthenticationHealth(ctx context.Context, in *AuthenticationHealthRequest, opts ...grpc.CallOption) (*AuthenticationHealthResponse, error) {
	out := new(AuthenticationHealthResponse)
	err := c.cc.Invoke(ctx, Authentication_AuthenticationHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) AuthenticationSignup(ctx context.Context, in *AuthenticationSignupRequest, opts ...grpc.CallOption) (*AuthenticationSignupResponse, error) {
	out := new(AuthenticationSignupResponse)
	err := c.cc.Invoke(ctx, Authentication_AuthenticationSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) AuthenticationSignin(ctx context.Context, in *AuthenticationSigninRequest, opts ...grpc.CallOption) (*AuthenticationSigninResponse, error) {
	out := new(AuthenticationSigninResponse)
	err := c.cc.Invoke(ctx, Authentication_AuthenticationSignin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) AuthenticationSignout(ctx context.Context, in *AuthenticationSignoutRequest, opts ...grpc.CallOption) (*AuthenticationSignoutResponse, error) {
	out := new(AuthenticationSignoutResponse)
	err := c.cc.Invoke(ctx, Authentication_AuthenticationSignout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) AuthenticationRefreshToken(ctx context.Context, in *AuthenticationRefreshTokenRequest, opts ...grpc.CallOption) (*AuthenticationRefreshTokenResponse, error) {
	out := new(AuthenticationRefreshTokenResponse)
	err := c.cc.Invoke(ctx, Authentication_AuthenticationRefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) AuthenticationDeleteAccount(ctx context.Context, in *AuthenticationDeleteAccountRequest, opts ...grpc.CallOption) (*AuthenticationDeleteAccountResponse, error) {
	out := new(AuthenticationDeleteAccountResponse)
	err := c.cc.Invoke(ctx, Authentication_AuthenticationDeleteAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) AuthenticationUsers(ctx context.Context, in *AuthenticationUsersRequest, opts ...grpc.CallOption) (*AuthenticationUsersResponse, error) {
	out := new(AuthenticationUsersResponse)
	err := c.cc.Invoke(ctx, Authentication_AuthenticationUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationClient) AuthenticationUser(ctx context.Context, in *AuthenticationUserRequest, opts ...grpc.CallOption) (*AuthenticationUserResponse, error) {
	out := new(AuthenticationUserResponse)
	err := c.cc.Invoke(ctx, Authentication_AuthenticationUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServer is the server API for Authentication service.
// All implementations must embed UnimplementedAuthenticationServer
// for forward compatibility
type AuthenticationServer interface {
	// ------------------------------------------------------------ Signup
	AuthenticationWelcome(context.Context, *AuthenticationWelcomeRequest) (*AuthenticationWelcomeResponse, error)
	// ------------------------------------------------------------ Signup
	AuthenticationHealth(context.Context, *AuthenticationHealthRequest) (*AuthenticationHealthResponse, error)
	// ------------------------------------------------------------ Signup
	AuthenticationSignup(context.Context, *AuthenticationSignupRequest) (*AuthenticationSignupResponse, error)
	// ------------------------------------------------------------ Signin
	AuthenticationSignin(context.Context, *AuthenticationSigninRequest) (*AuthenticationSigninResponse, error)
	// ------------------------------------------------------------ Signout
	AuthenticationSignout(context.Context, *AuthenticationSignoutRequest) (*AuthenticationSignoutResponse, error)
	// ------------------------------------------------------------ Refresh
	AuthenticationRefreshToken(context.Context, *AuthenticationRefreshTokenRequest) (*AuthenticationRefreshTokenResponse, error)
	// ------------------------------------------------------------ Deletion
	// If Account is not verified then we will directly delete it
	AuthenticationDeleteAccount(context.Context, *AuthenticationDeleteAccountRequest) (*AuthenticationDeleteAccountResponse, error)
	// ------------------------------------------------------------ Users
	AuthenticationUsers(context.Context, *AuthenticationUsersRequest) (*AuthenticationUsersResponse, error)
	// ------------------------------------------------------------ User
	AuthenticationUser(context.Context, *AuthenticationUserRequest) (*AuthenticationUserResponse, error)
	mustEmbedUnimplementedAuthenticationServer()
}

// UnimplementedAuthenticationServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServer struct {
}

func (UnimplementedAuthenticationServer) AuthenticationWelcome(context.Context, *AuthenticationWelcomeRequest) (*AuthenticationWelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationWelcome not implemented")
}
func (UnimplementedAuthenticationServer) AuthenticationHealth(context.Context, *AuthenticationHealthRequest) (*AuthenticationHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationHealth not implemented")
}
func (UnimplementedAuthenticationServer) AuthenticationSignup(context.Context, *AuthenticationSignupRequest) (*AuthenticationSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationSignup not implemented")
}
func (UnimplementedAuthenticationServer) AuthenticationSignin(context.Context, *AuthenticationSigninRequest) (*AuthenticationSigninResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationSignin not implemented")
}
func (UnimplementedAuthenticationServer) AuthenticationSignout(context.Context, *AuthenticationSignoutRequest) (*AuthenticationSignoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationSignout not implemented")
}
func (UnimplementedAuthenticationServer) AuthenticationRefreshToken(context.Context, *AuthenticationRefreshTokenRequest) (*AuthenticationRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationRefreshToken not implemented")
}
func (UnimplementedAuthenticationServer) AuthenticationDeleteAccount(context.Context, *AuthenticationDeleteAccountRequest) (*AuthenticationDeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationDeleteAccount not implemented")
}
func (UnimplementedAuthenticationServer) AuthenticationUsers(context.Context, *AuthenticationUsersRequest) (*AuthenticationUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationUsers not implemented")
}
func (UnimplementedAuthenticationServer) AuthenticationUser(context.Context, *AuthenticationUserRequest) (*AuthenticationUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticationUser not implemented")
}
func (UnimplementedAuthenticationServer) mustEmbedUnimplementedAuthenticationServer() {}

// UnsafeAuthenticationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServer will
// result in compilation errors.
type UnsafeAuthenticationServer interface {
	mustEmbedUnimplementedAuthenticationServer()
}

func RegisterAuthenticationServer(s grpc.ServiceRegistrar, srv AuthenticationServer) {
	s.RegisterService(&Authentication_ServiceDesc, srv)
}

func _Authentication_AuthenticationWelcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationWelcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).AuthenticationWelcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_AuthenticationWelcome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).AuthenticationWelcome(ctx, req.(*AuthenticationWelcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_AuthenticationHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).AuthenticationHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_AuthenticationHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).AuthenticationHealth(ctx, req.(*AuthenticationHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_AuthenticationSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).AuthenticationSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_AuthenticationSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).AuthenticationSignup(ctx, req.(*AuthenticationSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_AuthenticationSignin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationSigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).AuthenticationSignin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_AuthenticationSignin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).AuthenticationSignin(ctx, req.(*AuthenticationSigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_AuthenticationSignout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationSignoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).AuthenticationSignout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_AuthenticationSignout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).AuthenticationSignout(ctx, req.(*AuthenticationSignoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_AuthenticationRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).AuthenticationRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_AuthenticationRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).AuthenticationRefreshToken(ctx, req.(*AuthenticationRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_AuthenticationDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationDeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).AuthenticationDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_AuthenticationDeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).AuthenticationDeleteAccount(ctx, req.(*AuthenticationDeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_AuthenticationUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).AuthenticationUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_AuthenticationUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).AuthenticationUsers(ctx, req.(*AuthenticationUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authentication_AuthenticationUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServer).AuthenticationUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Authentication_AuthenticationUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServer).AuthenticationUser(ctx, req.(*AuthenticationUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Authentication_ServiceDesc is the grpc.ServiceDesc for Authentication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Authentication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authentication.Authentication",
	HandlerType: (*AuthenticationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticationWelcome",
			Handler:    _Authentication_AuthenticationWelcome_Handler,
		},
		{
			MethodName: "AuthenticationHealth",
			Handler:    _Authentication_AuthenticationHealth_Handler,
		},
		{
			MethodName: "AuthenticationSignup",
			Handler:    _Authentication_AuthenticationSignup_Handler,
		},
		{
			MethodName: "AuthenticationSignin",
			Handler:    _Authentication_AuthenticationSignin_Handler,
		},
		{
			MethodName: "AuthenticationSignout",
			Handler:    _Authentication_AuthenticationSignout_Handler,
		},
		{
			MethodName: "AuthenticationRefreshToken",
			Handler:    _Authentication_AuthenticationRefreshToken_Handler,
		},
		{
			MethodName: "AuthenticationDeleteAccount",
			Handler:    _Authentication_AuthenticationDeleteAccount_Handler,
		},
		{
			MethodName: "AuthenticationUsers",
			Handler:    _Authentication_AuthenticationUsers_Handler,
		},
		{
			MethodName: "AuthenticationUser",
			Handler:    _Authentication_AuthenticationUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.authentication.proto",
}
