# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rpc_groups_pb2 as rpc__groups__pb2
import rpc_health_pb2 as rpc__health__pb2
import rpc_welcome_pb2 as rpc__welcome__pb2


class WhisperNationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Welcome = channel.unary_unary(
                '/whisper_nation.WhisperNation/Welcome',
                request_serializer=rpc__welcome__pb2.WelcomeRequest.SerializeToString,
                response_deserializer=rpc__welcome__pb2.WelcomeResponse.FromString,
                )
        self.Health = channel.unary_unary(
                '/whisper_nation.WhisperNation/Health',
                request_serializer=rpc__health__pb2.HealthRequest.SerializeToString,
                response_deserializer=rpc__health__pb2.HealthResponse.FromString,
                )
        self.CreateGroup = channel.unary_unary(
                '/whisper_nation.WhisperNation/CreateGroup',
                request_serializer=rpc__groups__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=rpc__groups__pb2.CreateGroupResponse.FromString,
                )
        self.ListGroups = channel.unary_unary(
                '/whisper_nation.WhisperNation/ListGroups',
                request_serializer=rpc__groups__pb2.ListGroupsRequest.SerializeToString,
                response_deserializer=rpc__groups__pb2.ListGroupsResponse.FromString,
                )
        self.ListGroupMembers = channel.unary_unary(
                '/whisper_nation.WhisperNation/ListGroupMembers',
                request_serializer=rpc__groups__pb2.ListGroupMembersRequest.SerializeToString,
                response_deserializer=rpc__groups__pb2.ListGroupMembersResponse.FromString,
                )


class WhisperNationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Welcome(self, request, context):
        """------------------------------------------------------ System
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroupMembers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WhisperNationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Welcome': grpc.unary_unary_rpc_method_handler(
                    servicer.Welcome,
                    request_deserializer=rpc__welcome__pb2.WelcomeRequest.FromString,
                    response_serializer=rpc__welcome__pb2.WelcomeResponse.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=rpc__health__pb2.HealthRequest.FromString,
                    response_serializer=rpc__health__pb2.HealthResponse.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=rpc__groups__pb2.CreateGroupRequest.FromString,
                    response_serializer=rpc__groups__pb2.CreateGroupResponse.SerializeToString,
            ),
            'ListGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroups,
                    request_deserializer=rpc__groups__pb2.ListGroupsRequest.FromString,
                    response_serializer=rpc__groups__pb2.ListGroupsResponse.SerializeToString,
            ),
            'ListGroupMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroupMembers,
                    request_deserializer=rpc__groups__pb2.ListGroupMembersRequest.FromString,
                    response_serializer=rpc__groups__pb2.ListGroupMembersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'whisper_nation.WhisperNation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WhisperNation(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Welcome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/whisper_nation.WhisperNation/Welcome',
            rpc__welcome__pb2.WelcomeRequest.SerializeToString,
            rpc__welcome__pb2.WelcomeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/whisper_nation.WhisperNation/Health',
            rpc__health__pb2.HealthRequest.SerializeToString,
            rpc__health__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/whisper_nation.WhisperNation/CreateGroup',
            rpc__groups__pb2.CreateGroupRequest.SerializeToString,
            rpc__groups__pb2.CreateGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/whisper_nation.WhisperNation/ListGroups',
            rpc__groups__pb2.ListGroupsRequest.SerializeToString,
            rpc__groups__pb2.ListGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGroupMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/whisper_nation.WhisperNation/ListGroupMembers',
            rpc__groups__pb2.ListGroupMembersRequest.SerializeToString,
            rpc__groups__pb2.ListGroupMembersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
