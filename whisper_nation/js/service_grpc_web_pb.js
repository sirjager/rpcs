/**
 * @fileoverview gRPC-Web generated client stub for whisper_nation
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.12
// source: service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('./google/api/annotations_pb.js')

var protoc$gen$openapiv2_options_annotations_pb = require('./protoc-gen-openapiv2/options/annotations_pb.js')

var health_pb = require('./health_pb.js')

var welcome_pb = require('./welcome_pb.js')

var groups_pb = require('./groups_pb.js')
const proto = {};
proto.whisper_nation = require('./service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.whisper_nation.WhisperNationClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.whisper_nation.WhisperNationPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.WelcomeRequest,
 *   !proto.whisper_nation.WelcomeResponse>}
 */
const methodDescriptor_WhisperNation_Welcome = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/Welcome',
  grpc.web.MethodType.UNARY,
  welcome_pb.WelcomeRequest,
  welcome_pb.WelcomeResponse,
  /**
   * @param {!proto.whisper_nation.WelcomeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  welcome_pb.WelcomeResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.WelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.WelcomeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.WelcomeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.welcome =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/Welcome',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_Welcome,
      callback);
};


/**
 * @param {!proto.whisper_nation.WelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.WelcomeResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.welcome =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/Welcome',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_Welcome);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.HealthRequest,
 *   !proto.whisper_nation.HealthResponse>}
 */
const methodDescriptor_WhisperNation_Health = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/Health',
  grpc.web.MethodType.UNARY,
  health_pb.HealthRequest,
  health_pb.HealthResponse,
  /**
   * @param {!proto.whisper_nation.HealthRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  health_pb.HealthResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.HealthRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.HealthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.HealthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.health =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/Health',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_Health,
      callback);
};


/**
 * @param {!proto.whisper_nation.HealthRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.HealthResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.health =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/Health',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_Health);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.CreateGroupRequest,
 *   !proto.whisper_nation.CreateGroupResponse>}
 */
const methodDescriptor_WhisperNation_CreateGroup = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/CreateGroup',
  grpc.web.MethodType.UNARY,
  groups_pb.CreateGroupRequest,
  groups_pb.CreateGroupResponse,
  /**
   * @param {!proto.whisper_nation.CreateGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  groups_pb.CreateGroupResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.CreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.CreateGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.CreateGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.createGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/CreateGroup',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_CreateGroup,
      callback);
};


/**
 * @param {!proto.whisper_nation.CreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.CreateGroupResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.createGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/CreateGroup',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_CreateGroup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.ListGroupsRequest,
 *   !proto.whisper_nation.ListGroupsResponse>}
 */
const methodDescriptor_WhisperNation_ListGroups = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/ListGroups',
  grpc.web.MethodType.UNARY,
  groups_pb.ListGroupsRequest,
  groups_pb.ListGroupsResponse,
  /**
   * @param {!proto.whisper_nation.ListGroupsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  groups_pb.ListGroupsResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.ListGroupsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.ListGroupsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.ListGroupsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.listGroups =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/ListGroups',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_ListGroups,
      callback);
};


/**
 * @param {!proto.whisper_nation.ListGroupsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.ListGroupsResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.listGroups =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/ListGroups',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_ListGroups);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.ListGroupMembersRequest,
 *   !proto.whisper_nation.ListGroupMembersResponse>}
 */
const methodDescriptor_WhisperNation_ListGroupMembers = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/ListGroupMembers',
  grpc.web.MethodType.UNARY,
  groups_pb.ListGroupMembersRequest,
  groups_pb.ListGroupMembersResponse,
  /**
   * @param {!proto.whisper_nation.ListGroupMembersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  groups_pb.ListGroupMembersResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.ListGroupMembersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.ListGroupMembersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.ListGroupMembersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.listGroupMembers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/ListGroupMembers',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_ListGroupMembers,
      callback);
};


/**
 * @param {!proto.whisper_nation.ListGroupMembersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.ListGroupMembersResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.listGroupMembers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/ListGroupMembers',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_ListGroupMembers);
};


module.exports = proto.whisper_nation;

