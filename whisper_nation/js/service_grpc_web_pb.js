/**
 * @fileoverview gRPC-Web generated client stub for whisper_nation
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.12
// source: service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('./google/api/annotations_pb.js')

var protoc$gen$openapiv2_options_annotations_pb = require('./protoc-gen-openapiv2/options/annotations_pb.js')

var rpc$health_pb = require('./rpc-health_pb.js')

var rpc$welcome_pb = require('./rpc-welcome_pb.js')

var rpc$groups_pb = require('./rpc-groups_pb.js')
const proto = {};
proto.whisper_nation = require('./service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.whisper_nation.WhisperNationClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.whisper_nation.WhisperNationPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.WhisperNationWelcomeRequest,
 *   !proto.whisper_nation.WhisperNationWelcomeResponse>}
 */
const methodDescriptor_WhisperNation_WhisperNationWelcome = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/WhisperNationWelcome',
  grpc.web.MethodType.UNARY,
  rpc$welcome_pb.WhisperNationWelcomeRequest,
  rpc$welcome_pb.WhisperNationWelcomeResponse,
  /**
   * @param {!proto.whisper_nation.WhisperNationWelcomeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$welcome_pb.WhisperNationWelcomeResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.WhisperNationWelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.WhisperNationWelcomeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.WhisperNationWelcomeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.whisperNationWelcome =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationWelcome',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationWelcome,
      callback);
};


/**
 * @param {!proto.whisper_nation.WhisperNationWelcomeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.WhisperNationWelcomeResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.whisperNationWelcome =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationWelcome',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationWelcome);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.WhisperNationHealthRequest,
 *   !proto.whisper_nation.WhisperNationHealthResponse>}
 */
const methodDescriptor_WhisperNation_WhisperNationHealth = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/WhisperNationHealth',
  grpc.web.MethodType.UNARY,
  rpc$health_pb.WhisperNationHealthRequest,
  rpc$health_pb.WhisperNationHealthResponse,
  /**
   * @param {!proto.whisper_nation.WhisperNationHealthRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$health_pb.WhisperNationHealthResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.WhisperNationHealthRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.WhisperNationHealthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.WhisperNationHealthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.whisperNationHealth =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationHealth',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationHealth,
      callback);
};


/**
 * @param {!proto.whisper_nation.WhisperNationHealthRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.WhisperNationHealthResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.whisperNationHealth =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationHealth',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationHealth);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.WhisperNationCreateGroupRequest,
 *   !proto.whisper_nation.WhisperNationCreateGroupResponse>}
 */
const methodDescriptor_WhisperNation_WhisperNationCreateGroup = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/WhisperNationCreateGroup',
  grpc.web.MethodType.UNARY,
  rpc$groups_pb.WhisperNationCreateGroupRequest,
  rpc$groups_pb.WhisperNationCreateGroupResponse,
  /**
   * @param {!proto.whisper_nation.WhisperNationCreateGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$groups_pb.WhisperNationCreateGroupResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.WhisperNationCreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.WhisperNationCreateGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.WhisperNationCreateGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.whisperNationCreateGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationCreateGroup',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationCreateGroup,
      callback);
};


/**
 * @param {!proto.whisper_nation.WhisperNationCreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.WhisperNationCreateGroupResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.whisperNationCreateGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationCreateGroup',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationCreateGroup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.WhisperNationListGroupsRequest,
 *   !proto.whisper_nation.WhisperNationListGroupsResponse>}
 */
const methodDescriptor_WhisperNation_WhisperNationListGroups = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/WhisperNationListGroups',
  grpc.web.MethodType.UNARY,
  rpc$groups_pb.WhisperNationListGroupsRequest,
  rpc$groups_pb.WhisperNationListGroupsResponse,
  /**
   * @param {!proto.whisper_nation.WhisperNationListGroupsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$groups_pb.WhisperNationListGroupsResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.WhisperNationListGroupsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.WhisperNationListGroupsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.WhisperNationListGroupsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.whisperNationListGroups =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationListGroups',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationListGroups,
      callback);
};


/**
 * @param {!proto.whisper_nation.WhisperNationListGroupsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.WhisperNationListGroupsResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.whisperNationListGroups =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationListGroups',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationListGroups);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.whisper_nation.WhisperNationListGroupMembersRequest,
 *   !proto.whisper_nation.WhisperNationListGroupMembersResponse>}
 */
const methodDescriptor_WhisperNation_WhisperNationListGroupMembers = new grpc.web.MethodDescriptor(
  '/whisper_nation.WhisperNation/WhisperNationListGroupMembers',
  grpc.web.MethodType.UNARY,
  rpc$groups_pb.WhisperNationListGroupMembersRequest,
  rpc$groups_pb.WhisperNationListGroupMembersResponse,
  /**
   * @param {!proto.whisper_nation.WhisperNationListGroupMembersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$groups_pb.WhisperNationListGroupMembersResponse.deserializeBinary
);


/**
 * @param {!proto.whisper_nation.WhisperNationListGroupMembersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.whisper_nation.WhisperNationListGroupMembersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.whisper_nation.WhisperNationListGroupMembersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.whisper_nation.WhisperNationClient.prototype.whisperNationListGroupMembers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationListGroupMembers',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationListGroupMembers,
      callback);
};


/**
 * @param {!proto.whisper_nation.WhisperNationListGroupMembersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.whisper_nation.WhisperNationListGroupMembersResponse>}
 *     Promise that resolves to the response
 */
proto.whisper_nation.WhisperNationPromiseClient.prototype.whisperNationListGroupMembers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/whisper_nation.WhisperNation/WhisperNationListGroupMembers',
      request,
      metadata || {},
      methodDescriptor_WhisperNation_WhisperNationListGroupMembers);
};


module.exports = proto.whisper_nation;

