// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: service.proto

package gomicro

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoMicro_Welcome_FullMethodName = "/gomicro.GoMicro/Welcome"
	GoMicro_Health_FullMethodName  = "/gomicro.GoMicro/Health"
)

// GoMicroClient is the client API for GoMicro service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoMicroClient interface {
	// Welcome endpoint returns a welcome message.
	Welcome(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (*WelcomeResponse, error)
	// Health endpoint returns the health status of the API.
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type goMicroClient struct {
	cc grpc.ClientConnInterface
}

func NewGoMicroClient(cc grpc.ClientConnInterface) GoMicroClient {
	return &goMicroClient{cc}
}

func (c *goMicroClient) Welcome(ctx context.Context, in *WelcomeRequest, opts ...grpc.CallOption) (*WelcomeResponse, error) {
	out := new(WelcomeResponse)
	err := c.cc.Invoke(ctx, GoMicro_Welcome_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goMicroClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, GoMicro_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoMicroServer is the server API for GoMicro service.
// All implementations must embed UnimplementedGoMicroServer
// for forward compatibility
type GoMicroServer interface {
	// Welcome endpoint returns a welcome message.
	Welcome(context.Context, *WelcomeRequest) (*WelcomeResponse, error)
	// Health endpoint returns the health status of the API.
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedGoMicroServer()
}

// UnimplementedGoMicroServer must be embedded to have forward compatible implementations.
type UnimplementedGoMicroServer struct {
}

func (UnimplementedGoMicroServer) Welcome(context.Context, *WelcomeRequest) (*WelcomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Welcome not implemented")
}
func (UnimplementedGoMicroServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedGoMicroServer) mustEmbedUnimplementedGoMicroServer() {}

// UnsafeGoMicroServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoMicroServer will
// result in compilation errors.
type UnsafeGoMicroServer interface {
	mustEmbedUnimplementedGoMicroServer()
}

func RegisterGoMicroServer(s grpc.ServiceRegistrar, srv GoMicroServer) {
	s.RegisterService(&GoMicro_ServiceDesc, srv)
}

func _GoMicro_Welcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelcomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoMicroServer).Welcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoMicro_Welcome_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoMicroServer).Welcome(ctx, req.(*WelcomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoMicro_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoMicroServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoMicro_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoMicroServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoMicro_ServiceDesc is the grpc.ServiceDesc for GoMicro service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoMicro_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gomicro.GoMicro",
	HandlerType: (*GoMicroServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Welcome",
			Handler:    _GoMicro_Welcome_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _GoMicro_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
