/**
 * @fileoverview gRPC-Web generated client stub for emails
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.20.3
// source: service.emails.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_api_annotations_pb = require('./google/api/annotations_pb.js')

var protoc$gen$openapiv2_options_annotations_pb = require('./protoc-gen-openapiv2/options/annotations_pb.js')

var rpc$health_emails_pb = require('./rpc-health.emails_pb.js')

var rpc$send_emails_pb = require('./rpc-send.emails_pb.js')
const proto = {};
proto.emails = require('./service.emails_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.emails.EmailsClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.emails.EmailsPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.emails.EmailsHealthRequest,
 *   !proto.emails.EmailsHealthResponse>}
 */
const methodDescriptor_Emails_EmailsHealth = new grpc.web.MethodDescriptor(
  '/emails.Emails/EmailsHealth',
  grpc.web.MethodType.UNARY,
  rpc$health_emails_pb.EmailsHealthRequest,
  rpc$health_emails_pb.EmailsHealthResponse,
  /**
   * @param {!proto.emails.EmailsHealthRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$health_emails_pb.EmailsHealthResponse.deserializeBinary
);


/**
 * @param {!proto.emails.EmailsHealthRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.emails.EmailsHealthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.emails.EmailsHealthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.emails.EmailsClient.prototype.emailsHealth =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/emails.Emails/EmailsHealth',
      request,
      metadata || {},
      methodDescriptor_Emails_EmailsHealth,
      callback);
};


/**
 * @param {!proto.emails.EmailsHealthRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.emails.EmailsHealthResponse>}
 *     Promise that resolves to the response
 */
proto.emails.EmailsPromiseClient.prototype.emailsHealth =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/emails.Emails/EmailsHealth',
      request,
      metadata || {},
      methodDescriptor_Emails_EmailsHealth);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.emails.EmailsSendMailRequest,
 *   !proto.emails.EmailsSendMailResponse>}
 */
const methodDescriptor_Emails_EmailsSendMail = new grpc.web.MethodDescriptor(
  '/emails.Emails/EmailsSendMail',
  grpc.web.MethodType.UNARY,
  rpc$send_emails_pb.EmailsSendMailRequest,
  rpc$send_emails_pb.EmailsSendMailResponse,
  /**
   * @param {!proto.emails.EmailsSendMailRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  rpc$send_emails_pb.EmailsSendMailResponse.deserializeBinary
);


/**
 * @param {!proto.emails.EmailsSendMailRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.emails.EmailsSendMailResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.emails.EmailsSendMailResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.emails.EmailsClient.prototype.emailsSendMail =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/emails.Emails/EmailsSendMail',
      request,
      metadata || {},
      methodDescriptor_Emails_EmailsSendMail,
      callback);
};


/**
 * @param {!proto.emails.EmailsSendMailRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.emails.EmailsSendMailResponse>}
 *     Promise that resolves to the response
 */
proto.emails.EmailsPromiseClient.prototype.emailsSendMail =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/emails.Emails/EmailsSendMail',
      request,
      metadata || {},
      methodDescriptor_Emails_EmailsSendMail);
};


module.exports = proto.emails;

